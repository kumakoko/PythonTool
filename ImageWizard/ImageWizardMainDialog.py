"""Subclass of MainDialog, which is generated by wxFormBuilder."""

import wx
import os
import MainDialog
import FileDropTarget
import ImageTools
import ImageViewAndGrid
import ImageClipInfoJsonReader


# Implementing MainDialog
class ImageWizardMainDialog(MainDialog.MainDialog):
    def __init__(self, parent):
        MainDialog.MainDialog.__init__(self, parent)
        drop_target = FileDropTarget.FileDropTarget(self.m_listBoxSrcImage)
        self.m_listBoxSrcImage.SetDropTarget(drop_target)
        self.m_comboBoxSuffix.Append(".png")
        self.m_comboBoxSuffix.Append(".tga")
        self.m_comboBoxSuffix.Append(".jpg")
        self.m_comboBoxSuffix.Append(".bmp")
        self.m_comboBoxSuffix.SetValue(".png")  # 直接设置显示文本
        self.m_ImageViewAndGrid = ImageViewAndGrid.ImageViewAndGrid(self.m_scrolledWindowImageViewAndGrid)
        self._InitClipInfoListControl()

    def _InitClipInfoListControl(self):
        # 获取HeaderCtrl并设置属性
        self.m_listCtrlClipInfo.InsertColumn(0, u"图块文件名", width=100)  # 最简单的列头
        self.m_listCtrlClipInfo.InsertColumn(1, u"图块左上X", width=70)
        self.m_listCtrlClipInfo.InsertColumn(2, u"图块左上Y", width=70)
        self.m_listCtrlClipInfo.InsertColumn(3, u"图块宽度", width=60)
        self.m_listCtrlClipInfo.InsertColumn(4, u"图块高度", width=60)

    def OnFilePickerLoadClipInfoFileChanged(self, event):
        print("OnFilePickerLoadClipInfoFileChanged")
        # 假设JSON文件名为 rectangles.json
        file_path = self.m_filePickerLoadClipInfoFile.GetPath()
        json_data = ImageClipInfoJsonReader.ReadJsonFile(file_path)

        if json_data:
            print("成功读取JSON数据:")
            for idx, item in enumerate(json_data, 1):
                row = self.m_listCtrlClipInfo.InsertItem(idx, str(idx + 1))  # ID列
                self.m_listCtrlClipInfo.SetItem(row, 0, item['name'])
                self.m_listCtrlClipInfo.SetItem(row, 1, str(item['left_top_x']))
                self.m_listCtrlClipInfo.SetItem(row, 2, str(item['left_top_y']))
                self.m_listCtrlClipInfo.SetItem(row, 3, str(item['width']))
                self.m_listCtrlClipInfo.SetItem(row, 4, str(item['height']))


    def OnButtonDoClipClicked(self, event):
        print("OnButtonDoClipClicked")

    def OnButtonGenerateClicked(self, event):
        print("click=========")
        self.GenerateNewImage()

    def OnButtonClearSrcImageListBoxClicked(self, event):
        self.m_listBoxSrcImage.Clear()

    def OnButtonClearOutputFileListBoxClicked(self, event):
        self.m_listBoxOutputFiles.Clear()

    def OnButtonClearSrcOutputMessageClicked(self, event):
        self.m_textCtrlOutputMessage.Clear()

    def OnImageViewAndGridFileChanged(self, event):
        print("OnImageViewAndGridFileChanged")
        self.m_ImageViewAndGrid.load_image(self.GetViewAndGridImageFilePath())

    def OnTextCtrlViewGridWidthTextEnter(self, event):
        v = int(self.m_textCtrlViewGridWidth.GetValue())
        self.m_ImageViewAndGrid.set_w_interval(v)
        self.m_ImageViewAndGrid.RefreshWindow()

    def OnTextCtrlViewGridHeightTextEnter(self, event):
        v = int(self.m_textCtrlViewGridHeight.GetValue())
        self.m_ImageViewAndGrid.set_h_interval(v)
        self.m_ImageViewAndGrid.RefreshWindow()

    # 是否绘制网格线
    def OnCheckBoxViewAndGrid(self, event):
        self.m_ImageViewAndGrid.SetIsDrawViewGrid(not self.m_ImageViewAndGrid.GetIsDrawViewGrid())
        self.m_ImageViewAndGrid.RefreshWindow()

    def OnImageViewGridLineColorChanged(self, event):
        self.m_ImageViewAndGrid.SetGridLineColor(self.m_colourPickerGridLine.GetColour()) #self.m_colourPickerGridLine.GetValue())
        self.m_ImageViewAndGrid.RefreshWindow()

    # 点击裁剪按钮
    def OnButtonSplitImageClicked(self, event):
        # 拿到输出路径，如果没有，就以当前工作目录作为路径
        split_cell_output = self.GetSplitCellImageOutputPath()
        split_cell_name = self.GetSplitCellName()
        tile_width = self.GetSplitCellWidth()
        tile_height = self.GetSplitCellHeight()
        output_dir = self.GetSplitCellImageOutputPath()
        #output_dir = "D:/MyProjects/SaveYueFei/Arts/battle_scene/battle_scene_100"
        img = ImageTools.get_rgba_img(self.GetViewAndGridImageFilePath())
        #img = ImageTools.get_rgba_img("E:/download/Tile-AA.png")
        ImageTools.split_image_into_tiles(img, tile_width, tile_height, split_cell_name, output_dir)
        wx.MessageBox("完成分割图片！", "OK", wx.OK)


    def GetViewAndGridImageFilePath(self):
        return self.m_filePickerLoadImageForViewAndGrid.GetPath()
    def GetSplitCellWidth(self):
        return int(self.m_textCtrlSplitCellWidth.GetValue())

    def GetSplitCellHeight(self):
        return int(self.m_textCtrlSplitCellHeight.GetValue())

    # 拿到切割图的单图片名字
    def GetSplitCellName(self):
        # 后面再做异常处理了
        return self.m_textCtrlSplitCellName.GetValue()

    # 拿到切割图的存放目录
    def GetSplitCellImageOutputPath(self):
        # 和面再做异常处理
        return self.m_dirPickerSplitImagePath.GetPath()

    def GetScaleValue(self):
        try:
            return int(self.m_textCtrlScale.GetValue())
        except Exception as e:
            print(f"转换失败，发生错误：{e},将会返回缩放值1")
            return 1

    def GetColorTupleFromPicker(self,color_picker):
        c = color_picker.GetColour()
        return (c.GetRed(),c.GetGreen(),c.GetBlue())

    # 生成新的图片
    def GenerateNewImage(self):
        self.m_listBoxOutputFiles.Clear()
        img_count = self.m_listBoxSrcImage.GetCount()
        for i in range(img_count):
            srcImagePath = self.m_listBoxSrcImage.GetString(i)
            print(f"第 {i} 项:", srcImagePath)
            transparent_color = self.GetColorTupleFromPicker(self.m_colourPickerTransparent)
            scale = self.GetScaleValue()
            file_name_base = ImageTools.get_filename_without_extension(srcImagePath)
            rgba_img = ImageTools.convert_to_rgba_with_transparency(srcImagePath, transparent_color, scale)
            output_dir = self.m_dirPickerOutputDir.GetPath()
            output_file_path = os.path.join(output_dir, file_name_base + self.m_comboBoxSuffix.GetValue())
            self.m_listBoxOutputFiles.Append(output_file_path)
            rgba_img.save(output_file_path, format="png")